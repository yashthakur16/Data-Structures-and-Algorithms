#include <bits/stdc++.h> 
class Deque
{
public:
    int *arr;
    int front;
    int rear;
    int size;
    Deque(int n)
    {
        front=-1;
        rear=-1;
        size=n-1;
        arr=new int[size];
    }

    // Pushes 'X' in the front of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushFront(int x)
    {
        if((front==0 &&rear==size) ||(rear==(front-1)%(size)))
       {
           return false;
       }
       else if(front==-1)
       {
           front=rear=0;
       }
       else if(front==0 && rear!=size)
        {
            front=size;
        }
        else
        {
            front--;
        }

        arr[front]=x;
        return true;
    }

    // Pushes 'X' in the back of the deque. Returns true if it gets pushed into the deque, and false otherwise.
    bool pushRear(int x)
    {
        if((front==0 &&rear==size) ||(front !=0 && rear==(front-1)%(size)))
       {
           return false;
       }
       else if(front==-1)
       {
           front=rear=0;
       }
       else if(rear==size && front !=0 )
       {
           rear=0;
       }
       else
       {
           rear++;
       }
       arr[rear]=x;
       return true;
    }

    // Pops an element from the front of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popFront()
    {
        if(front==-1)
        {
            return -1;
        }
        
        int element=arr[front];
        arr[front]=-1;

        if(front==rear)
        {
            
            front=rear=-1;
        }
        else if(front==size)
        {
            front=0;
        }
        else
        {
            front++;
        }

        return element;
    }

    // Pops an element from the back of the deque. Returns -1 if the deque is empty, otherwise returns the popped element.
    int popRear()
    {
        if(front==-1)
        {
            return -1;
        }

        int element=arr[rear];
        arr[rear]=-1;

        if(front==rear)
        {
            front=rear=-1;
        }
        else if(rear==0)
        {
            rear=size;
        }
        else
        {
            rear--;
        }
        return element;
        
    }

    // Returns the first element of the deque. If the deque is empty, it returns -1.
    int getFront()
    {
        return (front==-1) ? -1: arr[front];
    }

    // Returns the last element of the deque. If the deque is empty, it returns -1.
    int getRear()
    {
        return (front==-1) ? -1: arr[rear];
    }

    // Returns true if the deque is empty. Otherwise returns false.
    bool isEmpty()
    {
        return (front==-1) ? true: false;
    }

    // Returns true if the deque is full. Otherwise returns false.
    bool isFull()
    {
        return ((front==0 &&rear==size) ||(front !=0 && rear==(front-1)%(size))) ? true:false;
    }
};
